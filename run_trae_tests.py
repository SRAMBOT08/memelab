import yaml
import json
import sys
from pathlib import Path

def process_payload(payload):
    """Process the input payload and return a result"""
    prompt = payload.get("prompt", "")
    user = payload.get("user", "unknown")
    tone = payload.get("tone", "neutral")
    
    # Generate a response based on the input
    result = {
        "captions": [
            {"id": "A", "text": f"TRAE: {user} asked about '{prompt}' with {tone} tone", "image_idea": "AI concept"},
            {"id": "B", "text": f"Creative caption for: {prompt}", "image_idea": "meme format"}
        ],
        "safety_flag": "none",
        "rationale": "Generated by run_trae_tests.py simulation"
    }
    
    return result

# Check if input is coming from stdin (for pathway_processor.py)
if not sys.stdin.isatty():
    try:
        # Read JSON from stdin
        payload = json.load(sys.stdin)
        # Process the payload
        result = process_payload(payload)
        # Output JSON result
        json.dump(result, sys.stdout)
        sys.stdout.flush()
        sys.exit(0)
    except json.JSONDecodeError:
        print(json.dumps({"error": "Invalid JSON input"}))
        sys.exit(1)

# If not called from stdin, run the normal test flow
try:
    # Load TRAE config
    cfg_path = Path("trae/trae_config.yaml")
    if not cfg_path.exists():
        raise SystemExit("❌ Missing trae/trae_config.yaml — make sure you created it earlier.")

    with cfg_path.open() as f:
        config = yaml.safe_load(f)

    # Load tests
    tests_file = Path(config["tests"]["file"])
    if not tests_file.exists():
        raise SystemExit(f"❌ Missing tests file: {tests_file}")

    with tests_file.open() as f:
        tests = [json.loads(line) for line in f if line.strip()]

    print("=== TRAE Test Runner (Simulation) ===")
    print("Project:", config["project"]["name"])
    print("Description:", config["project"]["description"])
    print("Prompts available:", list(config["prompts"].keys()))
    print()

    for t in tests:
        print(f"Test {t['id']} - {t.get('note','')}")
        print(" User input:", t['input'])
        print(" → Would run research summarizer prompt with this input")
        print("---")
except Exception as e:
    # If there's an error in the test flow, still return a valid JSON response
    # This ensures pathway_processor.py can still get a result
    print(json.dumps({
        "captions": [{"id": "ERR", "text": f"Error: {str(e)}", "image_idea": "error"}],
        "safety_flag": "none",
        "rationale": "Error in run_trae_tests.py"
    }))
